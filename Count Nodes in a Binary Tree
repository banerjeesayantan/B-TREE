# Count Nodes in a Binary Tree (C++)

This repository contains a **recursive solution** to count the number of nodes in a binary tree using C++.

---

## ðŸ”¹ Problem Statement

Given a binary tree, count the **total number of nodes** in the tree.

Example:

```
Input:
        1
       / \
      2   3
     / \   \
    4   5   6

Output: 6
```

---

## ðŸ”¹ Code Implementation

```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(!root) return 0;
       
        int leftCount = countNodes(root->left);
        int rightCount = countNodes(root->right);
        
        return (1 + leftCount + rightCount);
    }
};
```

---

## ðŸ”¹ How It Works

1. **Base case:** If the current node is `nullptr`, return 0.
2. **Recursive step:** Count nodes in the left and right subtrees.
3. **Return:** `1 + leftCount + rightCount` â€” 1 for current node, plus counts of children.

---

## ðŸ”¹ Use Cases

* Count total elements in a binary tree structure.
* Used in tree-based data analysis.
* Useful for understanding tree size in algorithms and interviews.

---

## ðŸ”¹ Time and Space Complexity

* **Time Complexity:** O(n), where n = number of nodes (each node visited once).
* **Space Complexity:** O(h), where h = height of the tree (due to recursion stack).

---

## ðŸ”¹ Reference

* [LeetCode 222: Count Complete Tree Nodes](https://leetcode.com/problems/count-complete-tree-nodes/)

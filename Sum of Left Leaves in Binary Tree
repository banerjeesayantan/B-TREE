# Sum of Left Leaves in Binary Tree (C++)

This repository contains a **C++ solution to calculate the sum of all left leaves in a binary tree**.

---

## ðŸ”¹ Problem Statement

Given a binary tree, find the **sum of all left leaves** in the tree.

Example:

```
Input:
       3
      / \
     9  20
       /  \
      15   7

Output: 24
Explanation: Left leaves are 9 and 15, sum = 24
```

---

## ðŸ”¹ Code Implementation

```cpp
#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if (!root) return 0;
        
        int sum = 0;
        
        // Check if left child is a leaf
        if (root->left && !root->left->left && !root->left->right) {
            sum += root->left->val;
        }
        
        // Recur for left and right subtrees
        sum += sumOfLeftLeaves(root->left);
        sum += sumOfLeftLeaves(root->right);
        
        return sum;
    }
};
```

---

## ðŸ”¹ How It Works

1. **Base case:** If the node is `nullptr`, return 0.
2. **Check left child:** If it exists and is a **leaf node**, add its value to `sum`.
3. **Recursive calls:** Add sums from left and right subtrees.
4. Return total `sum`.

---

## ðŸ”¹ Key Points

* Only **left leaves** are considered, right leaves are ignored.
* Recursive approach ensures **all nodes are checked** efficiently.

---

## ðŸ”¹ Time and Space Complexity

* **Time Complexity:** O(n), where n = number of nodes (each node visited once).
* **Space Complexity:** O(h), where h = height of tree (recursion stack).

---

## ðŸ”¹ Use Cases

* Binary tree traversal problems.
* Calculating hierarchical metrics starting from specific branches.
* Interview questions on tree recursion patterns.

---

## ðŸ”¹ Reference

* [LeetCode 404: Sum of Left Leaves](https://leetcode.com/problems/sum-of-left-leaves/)
